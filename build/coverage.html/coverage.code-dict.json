{"/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/test.js":"/* istanbul instrument in package npmtest_nodejs_dashboard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/lib.npmtest_nodejs_dashboard.js":"/* istanbul instrument in package npmtest_nodejs_dashboard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nodejs_dashboard = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nodejs_dashboard = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nodejs-dashboard && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nodejs_dashboard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nodejs_dashboard\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nodejs_dashboard.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_nodejs_dashboard.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nodejs_dashboard.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_nodejs_dashboard.__dirname +\n                    '/lib.npmtest_nodejs_dashboard.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/index.js":"\"use strict\";\nvar dashboardAgent = require(\"./lib/dashboard-agent\");\n\nmodule.exports = dashboardAgent();\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/lib/dashboard-agent.js":"\"use strict\";\n\nvar SocketIO = require(\"socket.io-client\");\nvar blocked = require(\"blocked\");\nvar pusage = require(\"pidusage\");\nvar os = require(\"os\");\nvar _ = require(\"lodash\");\nvar config = require(\"./config\");\n\nvar dashboardAgent = function () {\n\n  var options = {\n    port: process.env[config.PORT_KEY],\n    refreshInterval: process.env[config.REFRESH_INTERVAL_KEY],\n    blockedThreshold: process.env[config.BLOCKED_THRESHOLD_KEY]\n  };\n\n  // check if the app was launched w/o the dashboard\n  // if so, don't start any of the monitoring\n  var enabled = options.port && options.refreshInterval && options.blockedThreshold;\n\n  var socket;\n\n  var metrics = {\n    eventLoop: {\n      delay: 0,\n      high: 0\n    },\n    mem: {\n      systemTotal: os.totalmem()\n    },\n    cpu: {\n      utilization: 0\n    }\n  };\n\n  var _delayed = function (delay) {\n    metrics.eventLoop.high = Math.max(metrics.eventLoop.high, delay);\n    metrics.eventLoop.delay = delay;\n  };\n\n  var _getStats = function (cb) {\n    _.merge(metrics.mem, process.memoryUsage());\n\n    pusage.stat(process.pid, function (err, stat) {\n\n      if (err) {\n        return cb(err);\n      }\n\n      metrics.cpu.utilization = stat.cpu;\n      return cb(null, metrics);\n    });\n\n  };\n\n  var resetEventMetrics = function () {\n    metrics.eventLoop.delay = 0;\n  };\n\n  var _emitStats = function () {\n\n    _getStats(function (err, newMetrics) {\n      if (err) {\n        console.error(\"Failed to load metrics: \", err); //eslint-disable-line\n        if (socket && socket.connected) {\n          socket.emit(\"error\", JSON.stringify(err));\n        }\n      } else if (socket && socket.connected) {\n        socket.emit(\"metrics\", JSON.stringify(newMetrics));\n      }\n\n      resetEventMetrics();\n    });\n\n  };\n\n  var startPump = function () {\n    if (enabled) {\n      socket = new SocketIO(\"http://localhost:\" + options.port);\n      blocked(_delayed, { threshold: options.blockedThreshold });\n      options.intervalId = setInterval(_emitStats, options.refreshInterval);\n    }\n  };\n\n  var destroy = function () {\n    if (socket) {\n      socket.close();\n      socket = null;\n    }\n    if (options.intervalId) {\n      clearInterval(options.intervalId);\n      options.intervalId = null;\n    }\n  };\n\n  startPump();\n\n  return {\n    _delayed: _delayed,\n    _getStats: _getStats,\n    _emitStats: _emitStats,\n    destroy: destroy\n  };\n};\n\nmodule.exports = dashboardAgent;\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/lib/config.js":"\"use strict\";\n\nvar pkg = require(\"../package.json\");\n\nmodule.exports = {\n  PORT: 9838,\n  PORT_KEY: pkg.name + \"_PORT\",\n  REFRESH_INTERVAL: 1000,\n  REFRESH_INTERVAL_KEY: pkg.name + \"_REFRESH_INTERVAL\",\n  BLOCKED_THRESHOLD: 10,\n  BLOCKED_THRESHOLD_KEY: pkg.name + \"_BLOCKED_THRESHOLD\",\n  LAYOUTS: \"\"\n};\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/bin/nodejs-dashboard.js":"#!/usr/bin/env node\n\"use strict\";\n\nvar SocketIO = require(\"socket.io\");\nvar spawn = require(\"cross-spawn\");\nvar commander = require(\"commander\");\nvar path = require(\"path\");\n\nvar Dashboard = require(\"../lib/dashboard\");\nvar config = require(\"../lib/config\");\nvar appPkg = require(path.resolve(\"package.json\"));\nvar pkg = require(\"../package.json\");\nvar parseSettings = require(\"../lib/parse-settings\");\n\nvar appName = appPkg.name || \"node\";\nvar program = new commander.Command(pkg.name);\n\n// Mimic commander sintax errors (with offsets) for consistency\n/* eslint-disable no-console */\nvar exitWithError = function () {\n  var args = Array.prototype.slice.call(arguments);\n  console.error();\n  console.error.apply(console, [\" \"].concat(args));\n  console.error();\n  process.exit(1); // eslint-disable-line no-process-exit\n};\n/* eslint-enable no-console */\n\nprogram.option(\"-e, --eventdelay [ms]\",\n  \"Minimum threshold for event loop reporting, default 10ms\",\n  config.BLOCKED_THRESHOLD);\n\nprogram.option(\"-l, --layouts [file]\",\n  \"Path to file with layouts\",\n  config.LAYOUTS);\n\nprogram.option(\"-p, --port [port]\",\n  \"Socket listener port\",\n  config.PORT);\n\nprogram.option(\"-r, --refreshinterval [ms]\",\n  \"Metrics refresh interval, default 1000ms\",\n  config.REFRESH_INTERVAL);\n\nprogram.option(\"-s, --settings [settings]\",\n  \"Overrides layout settings for given view types\",\n  function (settings) {\n    var res = parseSettings(settings);\n\n    if (res.error) {\n      exitWithError(res.error);\n    }\n\n    return res.result;\n  },\n  {}\n);\n\nprogram.version(pkg.version);\nprogram.usage(\"[options] -- [node] [script] [arguments]\");\nprogram.parse(process.argv);\n\nif (!program.args.length) {\n  program.outputHelp();\n  return;\n}\n\nvar command = program.args[0];\nvar args = program.args.slice(1);\n\nvar port = program.port;\n\nprocess.env[config.PORT_KEY] = port;\nprocess.env[config.REFRESH_INTERVAL_KEY] = program.refreshinterval;\nprocess.env[config.BLOCKED_THRESHOLD_KEY] = program.eventdelay;\n\n\nvar child = spawn(command, args, {\n  env: process.env,\n  stdio: [null, null, null, null],\n  detached: true\n});\n\nconsole.log(\"Waiting for client connection on %d...\", port); //eslint-disable-line\n\nvar server = new SocketIO(port);\n\nvar dashboard = new Dashboard({\n  appName: appName,\n  program: program,\n  layoutsFile: program.layouts,\n  settings: program.settings\n});\n\nserver.on(\"connection\", function (socket) {\n  socket.on(\"metrics\", function (data) {\n    dashboard.onEvent({ type: \"metrics\", data: JSON.parse(data) });\n  });\n\n  socket.on(\"error\", function (err) {\n    exitWithError(\"Received error from agent, exiting: \", err);\n  });\n});\n\nchild.stdout.on(\"data\", function (data) {\n  dashboard.onEvent({ type: \"stdout\", data: data.toString(\"utf8\") });\n});\n\nchild.stderr.on(\"data\", function (data) {\n  dashboard.onEvent({ type: \"stderr\", data: data.toString(\"utf8\") });\n});\n\nprocess.on(\"exit\", function () {\n  process.kill(process.platform === \"win32\" ? child.pid : -child.pid);\n});\n"}