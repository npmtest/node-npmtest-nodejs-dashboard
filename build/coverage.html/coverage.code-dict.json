{"/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/test.js":"/* istanbul instrument in package npmtest_nodejs_dashboard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/lib.npmtest_nodejs_dashboard.js":"/* istanbul instrument in package npmtest_nodejs_dashboard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nodejs_dashboard = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nodejs_dashboard = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nodejs-dashboard && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nodejs_dashboard */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nodejs_dashboard\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nodejs_dashboard.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nodejs_dashboard.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nodejs_dashboard.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nodejs_dashboard.__dirname + '/lib.npmtest_nodejs_dashboard.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/index.js":"\"use strict\";\nvar dashboardAgent = require(\"./lib/dashboard-agent\");\n\nmodule.exports = dashboardAgent();\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/lib/dashboard-agent.js":"\"use strict\";\n\nvar SocketIO = require(\"socket.io-client\");\nvar blocked = require(\"blocked\");\nvar pusage = require(\"pidusage\");\nvar os = require(\"os\");\nvar _ = require(\"lodash\");\nvar config = require(\"./config\");\n\nvar dashboardAgent = function () {\n\n  var options = {\n    port: process.env[config.PORT_KEY],\n    refreshInterval: process.env[config.REFRESH_INTERVAL_KEY],\n    blockedThreshold: process.env[config.BLOCKED_THRESHOLD_KEY]\n  };\n\n  // check if the app was launched w/o the dashboard\n  // if so, don't start any of the monitoring\n  var enabled = options.port && options.refreshInterval && options.blockedThreshold;\n\n  var socket;\n\n  var metrics = {\n    eventLoop: {\n      delay: 0,\n      high: 0\n    },\n    mem: {\n      systemTotal: os.totalmem()\n    },\n    cpu: {\n      utilization: 0\n    }\n  };\n\n  var _delayed = function (delay) {\n    metrics.eventLoop.high = Math.max(metrics.eventLoop.high, delay);\n    metrics.eventLoop.delay = delay;\n  };\n\n  var _getStats = function (cb) {\n    _.merge(metrics.mem, process.memoryUsage());\n\n    pusage.stat(process.pid, function (err, stat) {\n\n      if (err) {\n        return cb(err);\n      }\n\n      metrics.cpu.utilization = stat.cpu;\n      return cb(null, metrics);\n    });\n\n  };\n\n  var resetEventMetrics = function () {\n    metrics.eventLoop.delay = 0;\n  };\n\n  var _emitStats = function () {\n\n    _getStats(function (err, newMetrics) {\n      if (err) {\n        console.error(\"Failed to load metrics: \", err); //eslint-disable-line\n        if (socket && socket.connected) {\n          socket.emit(\"error\", JSON.stringify(err));\n        }\n      } else if (socket && socket.connected) {\n        socket.emit(\"metrics\", JSON.stringify(newMetrics));\n      }\n\n      resetEventMetrics();\n    });\n\n  };\n\n  var startPump = function () {\n    if (enabled) {\n      socket = new SocketIO(\"http://localhost:\" + options.port);\n      blocked(_delayed, { threshold: options.blockedThreshold });\n      options.intervalId = setInterval(_emitStats, options.refreshInterval);\n    }\n  };\n\n  var destroy = function () {\n    if (socket) {\n      socket.close();\n      socket = null;\n    }\n    if (options.intervalId) {\n      clearInterval(options.intervalId);\n      options.intervalId = null;\n    }\n  };\n\n  startPump();\n\n  return {\n    _delayed: _delayed,\n    _getStats: _getStats,\n    _emitStats: _emitStats,\n    destroy: destroy\n  };\n};\n\nmodule.exports = dashboardAgent;\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/lib/config.js":"\"use strict\";\n\nvar pkg = require(\"../package.json\");\n\nmodule.exports = {\n  PORT: 9838,\n  PORT_KEY: pkg.name + \"_PORT\",\n  REFRESH_INTERVAL: 1000,\n  REFRESH_INTERVAL_KEY: pkg.name + \"_REFRESH_INTERVAL\",\n  BLOCKED_THRESHOLD: 10,\n  BLOCKED_THRESHOLD_KEY: pkg.name + \"_BLOCKED_THRESHOLD\",\n  LAYOUTS: \"\"\n};\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/bin/nodejs-dashboard.js":"#!/usr/bin/env node\n\"use strict\";\n\nvar SocketIO = require(\"socket.io\");\nvar spawn = require(\"cross-spawn\");\nvar commander = require(\"commander\");\nvar path = require(\"path\");\n\nvar Dashboard = require(\"../lib/dashboard\");\nvar config = require(\"../lib/config\");\nvar appPkg = require(path.resolve(\"package.json\"));\nvar pkg = require(\"../package.json\");\nvar parseSettings = require(\"../lib/parse-settings\");\n\nvar appName = appPkg.name || \"node\";\nvar program = new commander.Command(pkg.name);\n\n// Mimic commander sintax errors (with offsets) for consistency\n/* eslint-disable no-console */\nvar exitWithError = function () {\n  var args = Array.prototype.slice.call(arguments);\n  console.error();\n  console.error.apply(console, [\" \"].concat(args));\n  console.error();\n  process.exit(1); // eslint-disable-line no-process-exit\n};\n/* eslint-enable no-console */\n\nprogram.option(\"-e, --eventdelay [ms]\",\n  \"Minimum threshold for event loop reporting, default 10ms\",\n  config.BLOCKED_THRESHOLD);\n\nprogram.option(\"-l, --layouts [file]\",\n  \"Path to file with layouts\",\n  config.LAYOUTS);\n\nprogram.option(\"-p, --port [port]\",\n  \"Socket listener port\",\n  config.PORT);\n\nprogram.option(\"-r, --refreshinterval [ms]\",\n  \"Metrics refresh interval, default 1000ms\",\n  config.REFRESH_INTERVAL);\n\nprogram.option(\"-s, --settings [settings]\",\n  \"Overrides layout settings for given view types\",\n  function (settings) {\n    var res = parseSettings(settings);\n\n    if (res.error) {\n      exitWithError(res.error);\n    }\n\n    return res.result;\n  },\n  {}\n);\n\nprogram.version(pkg.version);\nprogram.usage(\"[options] -- [node] [script] [arguments]\");\nprogram.parse(process.argv);\n\nif (!program.args.length) {\n  program.outputHelp();\n  return;\n}\n\nvar command = program.args[0];\nvar args = program.args.slice(1);\n\nvar port = program.port;\n\nprocess.env[config.PORT_KEY] = port;\nprocess.env[config.REFRESH_INTERVAL_KEY] = program.refreshinterval;\nprocess.env[config.BLOCKED_THRESHOLD_KEY] = program.eventdelay;\n\n\nvar child = spawn(command, args, {\n  env: process.env,\n  stdio: [null, null, null, null],\n  detached: true\n});\n\nconsole.log(\"Waiting for client connection on %d...\", port); //eslint-disable-line\n\nvar server = new SocketIO(port);\n\nvar dashboard = new Dashboard({\n  appName: appName,\n  program: program,\n  layoutsFile: program.layouts,\n  settings: program.settings\n});\n\nserver.on(\"connection\", function (socket) {\n  socket.on(\"metrics\", function (data) {\n    dashboard.onEvent({ type: \"metrics\", data: JSON.parse(data) });\n  });\n\n  socket.on(\"error\", function (err) {\n    exitWithError(\"Received error from agent, exiting: \", err);\n  });\n});\n\nchild.stdout.on(\"data\", function (data) {\n  dashboard.onEvent({ type: \"stdout\", data: data.toString(\"utf8\") });\n});\n\nchild.stderr.on(\"data\", function (data) {\n  dashboard.onEvent({ type: \"stderr\", data: data.toString(\"utf8\") });\n});\n\nprocess.on(\"exit\", function () {\n  process.kill(process.platform === \"win32\" ? child.pid : -child.pid);\n});\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/lib/dashboard.js":"\"use strict\";\n\nvar _ = require(\"lodash\");\nvar blessed = require(\"blessed\");\n\nvar StreamView = require(\"./views/stream-view\");\nvar EventLoopView = require(\"./views/eventloop-view\");\nvar MemoryGaugeView = require(\"./views/memory-gauge-view\");\nvar MemoryGraphView = require(\"./views/memory-graph-view\");\nvar CpuView = require(\"./views/cpu-view\");\nvar HelpView = require(\"./views/help\");\nvar generateLayouts = require(\"./generate-layouts\");\nvar LogProvider = require(\"./providers/log-provider\");\nvar MetricsProvider = require(\"./providers/metrics-provider\");\nvar BaseView = require(\"./views/base-view\");\n\nvar THROTTLE_TIMEOUT = 150;\n\nvar Dashboard = function Dashboard(options) {\n  this.options = options || {};\n  this.views = {};\n  this.settings = options.settings;\n\n  this.screen = blessed.screen({\n    smartCSR: true,\n    title: options.appName\n  });\n\n  this.logProvider = new LogProvider(this.screen);\n  this.metricsProvider = new MetricsProvider(this.screen);\n\n  this._createViews();\n  this._configureKeys();\n  this.screen.render();\n};\n\nDashboard.prototype._createViews = function () {\n  this.layouts = generateLayouts(this.options.layoutsFile);\n  this.views = [];\n\n  // container prevents stream view scrolling from interfering with side views\n  this.container = blessed.box();\n  this.screen.append(this.container);\n\n  this.helpView = new HelpView({\n    parent: this.container\n  });\n\n  this._showLayout(0);\n};\n\nDashboard.prototype._configureKeys = function () {\n\n  this.screen.key([\"left\", \"right\"], _.throttle(function (ch, key) {\n    var delta = key.name === \"left\" ? -1 : 1;\n    var target = (this.currentLayout + delta + this.layouts.length) % this.layouts.length;\n    this._showLayout(target);\n  }.bind(this), THROTTLE_TIMEOUT));\n\n  var helpNode = this.helpView.node;\n  this.screen.key([\"?\", \"h\"], function () {\n    helpNode.toggle();\n    this.screen.render();\n  }.bind(this));\n\n  this.screen.key(\"escape\", function () {\n    if (helpNode.visible) {\n      helpNode.hide();\n      this.screen.render();\n    } else {\n      this._showLayout(0);\n    }\n  }.bind(this));\n\n  this.screen.key([\"q\", \"C-c\"], function () {\n    process.exit(0); // eslint-disable-line no-process-exit\n  });\n};\n\nDashboard.prototype.onEvent = function (event) {\n  this.screen.emit(event.type, event.data);\n  // avoid double screen render for stream events (Element calls screen.render on scroll)\n  // TODO dashboard shouldn't know which events are used by which widgets\n  if (event.type === \"metrics\") {\n    this.screen.render();\n  }\n};\n\nvar VIEW_MAP = {\n  log: StreamView,\n  cpu: CpuView,\n  memory: MemoryGaugeView,\n  memoryGraph: MemoryGraphView,\n  eventLoop: EventLoopView\n};\n\nDashboard.prototype._showLayout = function (id) {\n  if (this.currentLayout === id) {\n    return;\n  }\n  _.each(this.views, function (view) {\n    view.destroy();\n  });\n\n  this.views = [];\n\n  _.each(this.layouts[id], function (layoutConfig) {\n    var View;\n\n    if (VIEW_MAP[layoutConfig.view.type]) {\n      View = VIEW_MAP[layoutConfig.view.type];\n    } else if (layoutConfig.view.module) {\n      // eslint-disable-next-line global-require\n      View = require(layoutConfig.view.module)(BaseView);\n    }\n\n    if (View) {\n      if (this.settings[layoutConfig.view.type]) {\n        layoutConfig = _.merge(layoutConfig, {\n          view: this.settings[layoutConfig.view.type]\n        });\n      }\n      var view = new View({\n        parent: this.container,\n        logProvider: this.logProvider,\n        metricsProvider: this.metricsProvider,\n        layoutConfig: layoutConfig\n      });\n\n      this.views.push(view);\n    }\n  }.bind(this));\n\n  this.currentLayout = id;\n  this.helpView.node.setFront();\n  this.screen.render();\n};\n\nmodule.exports = Dashboard;\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/lib/views/stream-view.js":"\"use strict\";\n\nvar assert = require(\"assert\");\nvar blessed = require(\"blessed\");\nvar util = require(\"util\");\nvar _ = require(\"lodash\");\n\nvar BaseView = require(\"./base-view\");\n\nvar MAX_OBJECT_LOG_DEPTH = 20;\n\n// reapply scroll method override from Log\n// https://github.com/chjj/blessed/blob/master/lib/widgets/log.js#L69\n// which is broken by workaround in Element\n// https://github.com/chjj/blessed/blob/master/lib/widgets/element.js#L35\n//\n// this method prevents auto-scrolling to bottom if user scrolled the view up\n// blessed v0.1.81 - https://github.com/chjj/blessed/issues/284\nvar fixLogScroll = function (log) {\n  var maxScrollPercent = 100;\n\n  log.scroll = function (offset, always) {\n    if (offset === 0) {\n      return this._scroll(offset, always);\n    }\n    this._userScrolled = true;\n    var ret = this._scroll(offset, always);\n    if (this.getScrollPerc() === maxScrollPercent) {\n      this._userScrolled = false;\n    }\n    return ret;\n  };\n};\n\nvar StreamView = function StreamView(options) {\n  BaseView.call(this, options);\n\n  assert(options.logProvider, \"StreamView requires logProvider\");\n\n  if (this.layoutConfig.exclude) {\n    this.excludeRegex = new RegExp(this.layoutConfig.exclude);\n  }\n\n  if (this.layoutConfig.include) {\n    this.includeRegex = new RegExp(this.layoutConfig.include);\n  }\n\n  this.logProvider = options.logProvider;\n\n  this._createView(options);\n\n  var content = options.logProvider.getLog(this.layoutConfig.streams, options.scrollback);\n\n  if (content.length > 0) {\n    this.log(content);\n  }\n\n  this._boundLog = this.log.bind(this);\n  _.each(this.layoutConfig.streams, function (eventName) {\n    this.logProvider.on(eventName, this._boundLog);\n  }.bind(this));\n};\n\nStreamView.prototype = Object.create(BaseView.prototype);\n\nStreamView.prototype._createView = function () {\n  this.node = blessed.log({\n    label: util.format(\" %s \", this.layoutConfig.title || this.layoutConfig.streams.join(\" / \")),\n\n    scrollable: true,\n    alwaysScroll: true,\n    scrollback: this.layoutConfig.scrollback,\n    scrollbar: {\n      inverse: true\n    },\n\n    input: true,\n    keys: true,\n    mouse: true,\n\n    tags: true,\n\n    border: \"line\",\n    style: {\n      fg: this.layoutConfig.fgColor,\n      bg: this.layoutConfig.bgColor,\n      border: {\n        fg: this.layoutConfig.borderColor\n      }\n    }\n  });\n\n  fixLogScroll(this.node);\n\n  this.recalculatePosition();\n\n  this.parent.append(this.node);\n};\n\nStreamView.prototype.getDefaultLayoutConfig = function () {\n  return {\n    borderColor: \"#F0F0F0\",\n    fgColor: \"white\",\n    bgColor: \"black\",\n    streams: [\"stdout\", \"stderr\"],\n    scrollback: 1000\n  };\n};\n\nStreamView.prototype.log = function (data) {\n  var lines = data.replace(/\\n$/, \"\");\n  if (this.excludeRegex || this.includeRegex) {\n    lines = lines.split(\"\\n\").reduce(function (arr, line) {\n      if (this.includeRegex && this.includeRegex.test(line)) {\n        var match = line.match(this.includeRegex);\n        arr.push(typeof match[1] === \"undefined\" ? line : match[1]);\n      }\n      if (this.excludeRegex && !this.excludeRegex.test(line)) {\n        arr.push(line);\n      }\n\n      return arr;\n    }.bind(this), []);\n\n    if (lines.length === 0) {\n      return;\n    }\n\n    lines = lines.join(\"\\n\");\n  }\n\n  this.node.log(lines);\n};\n\nStreamView.prototype.destroy = function () {\n  BaseView.prototype.destroy.call(this);\n\n  _.each(this.layoutConfig.streams, function (eventName) {\n    this.logProvider.removeListener(eventName, this._boundLog);\n  }.bind(this));\n\n  this._boundLog = null;\n  this.logProvider = null;\n};\n\n// fix Log's log/add method, which calls shiftLine with two parameters (start, end)\n// when it should call it with just one (num lines to shift out)\n// blessed v0.1.81 - https://github.com/chjj/blessed/issues/255\n/* istanbul ignore next */\nblessed.log.prototype.log =\nblessed.log.prototype.add = function add() {\n  var args = Array.prototype.slice.call(arguments);\n  if (typeof args[0] === \"object\") {\n    args[0] = util.inspect(args[0], { showHidden: true, depth: MAX_OBJECT_LOG_DEPTH });\n  }\n  var text = util.format.apply(util, args);\n  this.emit(\"log\", text);\n  var ret = this.pushLine(text);\n  if (this.scrollback && this._clines.fake.length > this.scrollback) {\n    this.shiftLine(this._clines.fake.length - this.scrollback);\n  }\n  return ret;\n};\n\n// This fix prevents crashing, when view is removed from parent during before nextTick call\n// (see https://github.com/chjj/blessed/blob/master/lib/widgets/log.js#L40)\nvar _setScrollPerc = blessed.scrollablebox.prototype.setScrollPerc;\nblessed.scrollablebox.prototype.setScrollPerc = function (percent) {\n  if (this.parent) {\n    _setScrollPerc.call(this, percent);\n  }\n};\n\nmodule.exports = StreamView;\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/lib/views/base-view.js":"\"use strict\";\n\nvar assert = require(\"assert\");\nvar _ = require(\"lodash\");\n\nvar BaseView = function BaseView(options) {\n  assert(options.parent, \"View requires parent\");\n  assert(options.layoutConfig && _.isFunction(options.layoutConfig.getPosition),\n    \"View requires layoutConfig option with getPosition function\");\n  this._remountOnResize = false;\n  this._getPosition = options.layoutConfig.getPosition;\n\n  this._boundRecalculatePosition = this.recalculatePosition.bind(this);\n  options.parent.screen.on(\"resize\", this._boundRecalculatePosition);\n\n  this.parent = options.parent;\n  this.layoutConfig = _.assign(this.getDefaultLayoutConfig(options), options.layoutConfig.view);\n};\n\nBaseView.prototype.getDefaultLayoutConfig = function () {\n  return { };\n};\n\nBaseView.prototype.recalculatePosition = function () {\n  var newPosition = this._getPosition(this.parent);\n\n  if (!_.isEqual(this.node.position, newPosition)) {\n    this.node.position = newPosition;\n\n    if (this._remountOnResize && this.node.parent === this.parent) {\n      this.parent.remove(this.node);\n      this.parent.append(this.node);\n    }\n  }\n};\n\nBaseView.prototype.destroy = function () {\n  if (this.node) {\n    this.parent.remove(this.node);\n    this.node = null;\n  }\n\n  this.parent.screen.removeListener(\"resize\", this._boundRecalculatePosition);\n  this._boundRecalculatePosition = null;\n};\n\nmodule.exports = BaseView;\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/lib/views/eventloop-view.js":"\"use strict\";\n\nvar _ = require(\"lodash\");\nvar BaseLineGraph = require(\"./base-line-graph\");\n\nvar EventLoopView = function EventLoopView(options) {\n  BaseLineGraph.call(this, _.merge({\n    unit: \"ms\",\n    series: {\n      delay: {},\n      high: { highwater: true }\n    }\n  }, options));\n};\n\nEventLoopView.prototype = Object.create(BaseLineGraph.prototype);\n\nEventLoopView.prototype.getDefaultLayoutConfig = function () {\n  return {\n    borderColor: \"cyan\",\n    title: \"event loop\",\n    limit: 30\n  };\n};\n\nEventLoopView.prototype.onEvent = function (data) {\n  this.update({\n    delay: data.eventLoop.delay,\n    high: data.eventLoop.high\n  });\n};\n\nmodule.exports = EventLoopView;\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/lib/views/base-line-graph.js":"\"use strict\";\n\nvar assert = require(\"assert\");\nvar contrib = require(\"blessed-contrib\");\nvar util = require(\"util\");\nvar _ = require(\"lodash\");\n\nvar BaseView = require(\"./base-view\");\n\nvar BaseLineGraph = function BaseLineGraph(options) {\n  BaseView.call(this, options);\n\n  assert(options.metricsProvider, \"View requires metricsProvider\");\n  this.metricsProvider = options.metricsProvider;\n\n  this.unit = options.unit || \"\";\n  this.label = this.layoutConfig.title ? util.format(\" %s \", this.layoutConfig.title) : \" \";\n\n  this._remountOnResize = true;\n\n  this.limit = this.layoutConfig.limit;\n  this.seriesOptions = options.series;\n\n  var xAxis = this._getXAxis();\n  this.series = _.mapValues(options.series, function (seriesConfig) {\n    if (seriesConfig.highwater && !seriesConfig.color) {\n      seriesConfig.color = \"red\";\n    }\n    return {\n      x: xAxis,\n      y: _.times(this.layoutConfig.limit, _.constant(0)),\n      style: {\n        line: seriesConfig.color\n      }\n    };\n  }.bind(this));\n\n  this._createGraph(options);\n\n  this._boundOnEvent = this.onEvent.bind(this);\n\n  options.metricsProvider.on(\"metrics\", this._boundOnEvent);\n};\n\nBaseLineGraph.prototype = Object.create(BaseView.prototype);\n\nBaseLineGraph.prototype.onEvent = function () {\n  throw new Error(\"BaseLineGraph onEvent should be overwritten\");\n};\n\nBaseLineGraph.prototype._isHighwater = function (name) {\n  return this.seriesOptions[name].highwater;\n};\n\n// Should be called by child's onEvent handler\nBaseLineGraph.prototype.update = function (values) {\n  _.each(values, function (value, seriesName) {\n    if (!this.series[seriesName]) {\n      return;\n    }\n    if (this._isHighwater(seriesName)) {\n      this.series[seriesName].y = _.times(this.limit, _.constant(value));\n    } else {\n      this.series[seriesName].y.shift();\n      this.series[seriesName].y.push(value);\n    }\n  }.bind(this));\n\n  this._updateLabel();\n\n  this.node.setData(_.values(this.series));\n};\n\nBaseLineGraph.prototype._updateLabel = function () {\n  // use view label + series labels/data\n\n  var seriesLabels = _.map(this.series, function (series, id) {\n    var seriesLabel = \"\";\n    if (this.seriesOptions[id].label) {\n      seriesLabel = this.seriesOptions[id].label + \" \";\n    } else if (!this.seriesOptions[id].hasOwnProperty(\"label\")) {\n      seriesLabel = id + \" \";\n    }\n    return util.format(\"%s(%d%s)\", seriesLabel, _.last(this.series[id].y), this.unit);\n  }.bind(this)).join(\", \");\n\n  this.node.setLabel(util.format(\"%s%s \", this.label, seriesLabels));\n};\n\nBaseLineGraph.prototype._getXAxis = function () {\n  return _.reverse(_.times(this.limit, String));\n};\n\nBaseLineGraph.prototype._createGraph = function (options) {\n  this.node = contrib.line({\n    label: this.label,\n    border: \"line\",\n    numYLabels: 4,\n    maxY: options.maxY,\n    showLegend: false,\n    wholeNumbersOnly: true,\n    style: {\n      border: {\n        fg: this.layoutConfig.borderColor\n      }\n    }\n  });\n\n  this.recalculatePosition();\n\n  this.parent.append(this.node);\n\n  var values = this.metricsProvider.getMetrics(this.limit);\n  _.each(values, function (value) {\n    this.onEvent(value);\n  }.bind(this));\n};\n\nBaseLineGraph.prototype.destroy = function () {\n  BaseView.prototype.destroy.call(this);\n\n  this.metricsProvider.removeListener(\"metrics\", this._boundOnEvent);\n\n  this._boundOnEvent = null;\n  this.metricsProvider = null;\n};\n\nmodule.exports = BaseLineGraph;\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/lib/views/memory-gauge-view.js":"\"use strict\";\n\nvar assert = require(\"assert\");\nvar blessed = require(\"blessed\");\nvar contrib = require(\"blessed-contrib\");\nvar prettyBytes = require(\"pretty-bytes\");\nvar util = require(\"util\");\n\nvar BaseView = require(\"./base-view\");\nvar utils = require(\"../utils\");\n\nvar MAX_PERCENT = 100;\n\nvar MemoryView = function MemoryView(options) {\n  BaseView.call(this, options);\n\n  assert(options.metricsProvider, \"View requires metricsProvider\");\n\n  this.metricsProvider = options.metricsProvider;\n\n  this._remountOnResize = true;\n  this._boundOnEvent = this.onEvent.bind(this);\n\n  this._createViews(options);\n\n  options.metricsProvider.on(\"metrics\", this._boundOnEvent);\n\n  var metrics = this.metricsProvider.getMetrics(1)[0];\n\n  if (metrics) {\n    this.onEvent(metrics);\n  }\n};\n\nMemoryView.prototype = Object.create(BaseView.prototype);\n\nMemoryView.prototype.getDefaultLayoutConfig = function () {\n  return {\n    borderColor: \"cyan\",\n    title: \"memory\"\n  };\n};\n\nMemoryView.prototype._createViews = function (options) {\n  this.node = blessed.box({\n    label: util.format(\" %s \", this.layoutConfig.title),\n    border: \"line\",\n    style: {\n      border: {\n        fg: this.layoutConfig.borderColor\n      }\n    }\n  });\n\n  this.recalculatePosition();\n\n  this.heapGauge = contrib.gauge({ label: \"heap\" });\n  this.node.append(this.heapGauge);\n\n  this.rssGauge = contrib.gauge({ label: \"resident\", top: \"50%\" });\n  this.node.append(this.rssGauge);\n\n  options.parent.append(this.node);\n};\n\nMemoryView.prototype.onEvent = function (data) {\n  var mem = data.mem;\n  this.update(this.heapGauge, mem.heapUsed, mem.heapTotal);\n  this.update(this.rssGauge, mem.rss, mem.systemTotal);\n};\n\nMemoryView.prototype.update = function (gauge, used, total) {\n  var percentUsed = utils.getPercentUsed(used, total);\n  if (gauge === this.heapGauge) {\n    gauge.setStack([\n      { percent: percentUsed, stroke: \"red\" },\n      { percent: MAX_PERCENT - percentUsed, stroke: \"blue\" }\n    ]);\n  } else {\n    gauge.setPercent(percentUsed);\n  }\n\n  gauge.setLabel(\n    util.format(\"%s: %s / %s\", gauge.options.label, prettyBytes(used), prettyBytes(total))\n  );\n};\n\nMemoryView.prototype.destroy = function () {\n  BaseView.prototype.destroy.call(this);\n\n  this.metricsProvider.removeListener(\"metrics\", this._boundOnEvent);\n\n  this._boundOnEvent = null;\n  this.metricsProvider = null;\n};\n\nmodule.exports = MemoryView;\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/lib/utils.js":"\"use strict\";\n\nvar MAX_PERCENT = 100;\n\nexports.getPercentUsed = function (used, total) {\n  return Math.floor(used / total * MAX_PERCENT);\n};\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/lib/views/memory-graph-view.js":"\"use strict\";\n\nvar _ = require(\"lodash\");\n\nvar BaseLineGraph = require(\"./base-line-graph\");\nvar utils = require(\"../utils\");\n\nvar MemoryGraphView = function MemoryGraphView(options) {\n  BaseLineGraph.call(this, _.merge({\n    unit: \"%\",\n    maxY: 100,\n    series: {\n      heap: { color: \"green\" },\n      resident: {}\n    }\n  }, options));\n};\n\nMemoryGraphView.prototype = Object.create(BaseLineGraph.prototype);\n\nMemoryGraphView.prototype.getDefaultLayoutConfig = function () {\n  return {\n    borderColor: \"cyan\",\n    title: \"memory\",\n    limit: 30\n  };\n};\n\nMemoryGraphView.prototype.onEvent = function (data) {\n  var mem = data.mem;\n  this.update({\n    heap: utils.getPercentUsed(mem.heapUsed, mem.heapTotal),\n    resident: utils.getPercentUsed(mem.rss, mem.systemTotal)\n  });\n};\n\nmodule.exports = MemoryGraphView;\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/lib/views/cpu-view.js":"\"use strict\";\n\nvar _ = require(\"lodash\");\nvar BaseLineGraph = require(\"./base-line-graph\");\n\nvar CpuView = function CpuView(options) {\n  BaseLineGraph.call(this, _.merge({\n    unit: \"%\",\n    maxY: 100,\n    series: {\n      cpu: { label: \"\" }\n    }\n  }, options));\n};\n\nCpuView.prototype = Object.create(BaseLineGraph.prototype);\n\nCpuView.prototype.getDefaultLayoutConfig = function () {\n  return {\n    borderColor: \"cyan\",\n    title: \"cpu utilization\",\n    limit: 30\n  };\n};\n\nCpuView.prototype.onEvent = function (data) {\n  this.update({ cpu: data.cpu.utilization.toFixed(1) });\n};\n\nmodule.exports = CpuView;\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/lib/views/help.js":"\"use strict\";\n\nvar blessed = require(\"blessed\");\n\nvar pkg = require(\"../../package.json\");\n\nvar HelpView = function HelpView(options) {\n  var content = [\n    \"{center}{bold}keybindings{/bold}{/center}\",\n    \"\",\n    \"{cyan-fg} left, right{/}  rotate through layouts\",\n    \"{cyan-fg}         esc{/}  close popup window / return to default layout\",\n    \"{cyan-fg}        h, ?{/}  toggle this window\",\n    \"{cyan-fg}   ctrl-c, q{/}  quit\",\n    \"\",\n    \"{right}{gray-fg}version: \" + pkg.version + \"{/}\"\n  ].join(\"\\n\");\n\n  this.node = blessed.box({\n    position: {\n      top: \"center\",\n      left: \"center\",\n      // using fixed numbers to support use of alignment tags\n      width: 64,\n      height: 10\n    },\n    border: \"line\",\n    padding: {\n      left: 1,\n      right: 1\n    },\n    style: {\n      border: {\n        fg: \"white\"\n      }\n    },\n    tags: true,\n    content: content,\n    hidden: true\n  });\n\n  options.parent.append(this.node);\n};\n\nmodule.exports = HelpView;\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/lib/generate-layouts.js":"\"use strict\";\nvar _ = require(\"lodash\");\nvar assert = require(\"assert\");\nvar path = require(\"path\");\nvar defaultLayoutConfig = require(\"./default-layout-config\");\nvar validate = require(\"jsonschema\").validate;\nvar layoutConfigSchema = require(\"./layout-config-schema.json\");\n/* eslint-disable no-magic-numbers */\n\n// Each layout consists of vertical panels, that contains its position and horizontal views.\n// Flex-like positions of panels and views defined by 'grow' and 'size' parameters.\n// View or panel with 'size' has exactly <size> height or width respectively.\n// View or panel with 'grow' fills <grow> part of the residuary space (it works like flex-grow).\n// By default, position = { grow: 1 }\n\nvar normalizePosition = function (position) {\n  if (!_.has(position, \"grow\") && !_.has(position, \"size\")) {\n    position = { grow: 1 };\n  }\n\n  return position;\n};\n\nvar concatPosition = function (position1, position2) {\n  position1 = normalizePosition(position1);\n  position2 = normalizePosition(position2);\n\n  return {\n    grow: (position1.grow || 0) + (position2.grow || 0),\n    size: (position1.size || 0) + (position2.size || 0)\n  };\n};\n\nvar getSummaryPosition = function (items) {\n  return items.map(function (item) { return item.position; })\n    .reduce(concatPosition, { grow: 0, size: 0 });\n};\n\nvar getSize = function (parentSize, itemPosition) {\n  var position = normalizePosition(itemPosition.position);\n  if (_.has(position, \"size\")) {\n    return position.size;\n  }\n\n  // Prevent last growing view from overflowing screen\n  var round = itemPosition.offset.grow + position.grow === itemPosition.summary.grow ?\n    Math.floor : Math.ceil;\n\n  return round(\n    (parentSize - itemPosition.summary.size) * position.grow / itemPosition.summary.grow\n  );\n};\n\nvar getOffset = function (parentSize, itemPosition) {\n  return itemPosition.summary.grow ? Math.ceil(\n    itemPosition.offset.size +\n    (parentSize - itemPosition.summary.size) * itemPosition.offset.grow / itemPosition.summary.grow\n  ) : 0;\n};\n\nvar createViewLayout = function (view, viewPosition, panelPosition) {\n  return {\n    view: view,\n    getPosition: function (parent) {\n      return {\n        width: getSize(parent.width, panelPosition),\n        height: getSize(parent.height, viewPosition),\n        left: getOffset(parent.width, panelPosition),\n        top: getOffset(parent.height, viewPosition)\n      };\n    }\n  };\n};\n\nvar createPanelLayout = function (panelPosition, views) {\n  var viewSummaryPosition = getSummaryPosition(views);\n  var offsetPosition = { size: 0, grow: 0 };\n\n  return views.map(function (view) {\n    var viewPosition = {\n      summary: viewSummaryPosition,\n      offset: offsetPosition,\n      position: view.position\n    };\n\n    offsetPosition = concatPosition(view.position, offsetPosition);\n\n    return createViewLayout(view, viewPosition, panelPosition);\n  });\n};\n\nvar createLayout = function (panelsConfig) {\n  var panelSummaryPosition = getSummaryPosition(panelsConfig);\n  var offsetPosition = { size: 0, grow: 0 };\n\n  return panelsConfig.reduce(function (layouts, panelConfig) {\n    var panelPosition = {\n      summary: panelSummaryPosition,\n      offset: offsetPosition,\n      position: panelConfig.position\n    };\n\n    var viewLayouts = createPanelLayout(panelPosition, panelConfig.views);\n\n    offsetPosition = concatPosition(panelConfig.position, offsetPosition);\n\n    return layouts.concat(viewLayouts);\n  }, []);\n};\n\nmodule.exports = function generateLayouts(layoutsFile) {\n  var layoutConfig = defaultLayoutConfig;\n  if (layoutsFile) {\n    /* eslint-disable global-require */\n    try {\n      layoutConfig = require(layoutsFile);\n    } catch (err1) {\n      layoutConfig = require(path.resolve(process.cwd(), layoutsFile));\n    }\n    /* eslint-enable global-require */\n    var validationResult = validate(layoutConfig, layoutConfigSchema);\n    assert(\n      validationResult.valid,\n      \"Layout config is invalid:\\n\\n  * \" + validationResult.errors.join(\"\\n  * \") + \"\\n\"\n    );\n  }\n\n  return layoutConfig.map(createLayout);\n};\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/lib/default-layout-config.js":"\"use strict\";\n\nmodule.exports = [\n  [\n    {\n      position: {\n        grow: 3\n      },\n      views: [\n        {\n          type: \"log\",\n          title: \"stdout\",\n          borderColor: \"green\",\n          streams: [\"stdout\"]\n        },\n        {\n          type: \"log\",\n          title: \"stderr\",\n          borderColor: \"red\",\n          streams: [\"stderr\"]\n        }\n      ]\n    },\n    {\n      views: [\n        {\n          type: \"cpu\",\n          limit: 30\n        },\n        {\n          type: \"eventLoop\",\n          limit: 30\n        },\n        {\n          type: \"memory\",\n          position: {\n            size: 15\n          }\n        }\n      ]\n    }\n  ],\n  [\n    {\n      position: {\n        grow: 3\n      },\n      views: [\n        {\n          type: \"log\",\n          title: \"log\",\n          borderColor: \"light-blue\",\n          streams: [\"stdout\", \"stderr\"]\n        }\n      ]\n    },\n    {\n      views: [\n        {\n          type: \"cpu\",\n          limit: 30\n        },\n        {\n          type: \"eventLoop\",\n          title: \"event loop\",\n          limit: 30\n        },\n        {\n          type: \"memory\",\n          position: {\n            size: 15\n          }\n        }\n      ]\n    }\n  ],\n  [\n    {\n      views: [\n        {\n          type: \"cpu\",\n          limit: 30\n        },\n        {\n          type: \"eventLoop\",\n          limit: 30\n        },\n        {\n          type: \"memoryGraph\"\n        }\n      ]\n    }\n  ],\n  [\n    {\n      views: [\n        {\n          type: \"log\",\n          title: \"stdout\",\n          borderColor: \"green\",\n          streams: [\"stdout\"]\n        },\n        {\n          type: \"log\",\n          title: \"stdout\",\n          borderColor: \"red\",\n          streams: [\"stderr\"]\n        }\n      ]\n    }\n  ],\n  [\n    {\n      views: [\n        {\n          type: \"log\",\n          title: \"log\",\n          borderColor: \"light-blue\",\n          streams: [\"stdout\", \"stderr\"]\n        }\n      ]\n    }\n  ]\n];\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/lib/providers/log-provider.js":"\"use strict\";\n\nvar EventEmitter = require(\"events\").EventEmitter;\n\nvar LogProvider = function LogProvider(screen) {\n  EventEmitter.call(this);\n\n  this._log = [];\n  this.limit = 10000;\n\n  screen.on(\"stdout\", this._onLog.bind(this, \"stdout\"));\n  screen.on(\"stderr\", this._onLog.bind(this, \"stderr\"));\n};\n\nLogProvider.prototype = Object.create(EventEmitter.prototype);\n\nLogProvider.setLimit = function (limit) {\n  this.limit = Math.max(this.limit, limit);\n};\n\nLogProvider.prototype._onLog = function (source, data) {\n  this._log.push([source, data]);\n  if (this._log.length > this.limit) {\n    this._log = this._log.slice(this.limit - this._log.length);\n  }\n\n  this.emit(source, data);\n};\n\nLogProvider.prototype.getLog = function (sources, limit) {\n  return this._log\n    .filter(function (entry) { return sources.indexOf(entry[0]) !== -1; })\n    .slice(0, limit || this.limit)\n    .map(function (entry) { return entry[1]; })\n    .join(\"\")\n    .replace(/\\n$/, \"\");\n};\n\nmodule.exports = LogProvider;\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/lib/providers/metrics-provider.js":"\"use strict\";\n\nvar EventEmitter = require(\"events\").EventEmitter;\n\nvar MetricsProvider = function MetricsProvider(screen) {\n  EventEmitter.call(this);\n\n  this._metrics = [];\n\n  screen.on(\"metrics\", this._onMetrics.bind(this));\n};\n\nMetricsProvider.prototype = Object.create(EventEmitter.prototype);\n\nMetricsProvider.prototype._onMetrics = function (data) {\n  this._metrics.push(data);\n\n  this.emit(\"metrics\", data);\n};\n\nMetricsProvider.prototype.getMetrics = function (limit) {\n  return this._metrics.slice(-limit);\n};\n\nmodule.exports = MetricsProvider;\n","/home/travis/build/npmtest/node-npmtest-nodejs-dashboard/node_modules/nodejs-dashboard/lib/parse-settings.js":"\"use strict\";\n\nvar _ = require(\"lodash\");\n\nvar parseSettings = function (settings) {\n  var settingsList = settings.split(\",\");\n  var parseResult = {};\n\n  for (var i = 0; i < settingsList.length; i++) {\n    var keyValue = settingsList[i].split(\"=\");\n    if (keyValue.length !== 2) { // eslint-disable-line no-magic-numbers\n      return {\n        error: \"error: settings should have format <view_type>.<param>=<value>: \" +\n          settingsList[i]\n      };\n    }\n    var key = keyValue[0].trim();\n    var value = keyValue[1].trim();\n    if (!/^[\\w\\d\\[\\]_-]+(\\.[\\w\\d\\[\\]_-]+)+$/.test(key)) {\n      return {\n        error: \"error: invalid path '\" + key + \"' for setting: \" + settingsList[i]\n      };\n    }\n\n    if (/^\\d+(\\.\\d*)?$/.test(value)) {\n      _.set(parseResult, key, parseFloat(value));\n    } else if (/^(true|false)$/.test(value)) {\n      _.set(parseResult, key, value === \"true\");\n    } else {\n      _.set(parseResult, key, value);\n    }\n  }\n\n  return { result: parseResult };\n};\n\nmodule.exports = parseSettings;\n"}